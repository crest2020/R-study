#purrr包学习
data(iris)
ir=iris[,1:4]

iris[,1:4]%>%map(mean)

ir%>%map(~mean(.x))

head(ir)
ir%>%map(function(x) mean(x))

map(ir,mean)

library(purrr)

map_dbl(ir,mean)
map_dbl(ir,mean,na.rm=T)

#例2 批量读取数据文件并合并（列名相同）

files = list.files("datas/", pattern = "xlsx", full.names = TRUE)
df = map_dfr(files, read_xlsx)    # 批量读取+按行堆叠合并

#说明：files 获取 datas 文件夹下所有 .xlsx 文件的路径，若嵌套只需设置参数 recursive = TRUR；

df=mtcars %>%select(mpg,cyl,wt)
df

df=df%>%group_nest(cyl)
df

df$data[[1]]

df=df %>% mutate(model=map(data,~lm(mpg~wt,data = .x)),pred=map(model,predict))

df$data[[1]]


library(purrr)
fun=function(x){x+1}
funxy=function(x,y){x-y}
x=c(1,5,8,9)
X=list(1,2,6,5)
y=c(8,4,6,2)
z=c(1,4,8,6)

res=map(x,fun)
res
res=map(X,fun)
res

res=map2(x,y,funxy)
res

res=map2(X,y,funxy)
res

funxyz=function(x,y,z){x+y+z}
I=list(X,y,z)
res=pmap(I,funxyz)
res

fun=function(x){x>1}
funxy=function(x,y){x>y}
funxyz=function(x,y,z){x>y-z}
y=c(8,4,6,2)
x=c(1,5,8,9)
z=c(9,5,4,6)

mydata=data.frame(x,y,z)
mydata

res=map_lgl(x,fun)
res
map(mydata$x,fun)

map2_lgl(x,y,funxy)

pmap_lgl(mydata,funxyz)

fun=function(x)(as.character(x))
funxy=function(x,y){paste0(as.character(x),as.character(y))}

funxyz=function(x,y,z){paste0(as.character(x),as.character(y),as.character(z))}

map_chr(x,fun)
map2_chr(x,y,funxy)
x
y
pmap_chr(mydata,funxyz)
mydata

fun=function(x){x+0.11}
funxy=function(x,y){x-y+0.69}
funxyz=function(x,y,z){x-y-z-0.554}

map_dbl(x,fun)
map2_dbl(x,y,funxy)
pmap_dbl(mydata,funxyz)

fun=function(x){data.frame(var1=x+0.11,var2=x)}

funxy=function(x,y){data.frame(var1=x-y+0.69,var2=x)}

funxyz=function(x,y,z){data.frame(var1=x-y-z+0.99,var2=x+y+z)}

map_dfr(x,fun)
map2_dfr(x,y,funxy)

x
y

pmap_dfr(mydata,funxyz)

mydata

map_dfc(x,fun)

fun
x

map2_dfc(x,y,funxy)

pmap_dfc(mydata,funxyz)

fun=function(x){sum(x)>8}

#这里.p是判断函数，.f是判断为真的执行语句，.else是判断为假的执行语句，.at可以是字符串或者数值索引，表示对.x中这些对象起作用。注意这里的作用单元是list或vector中的每个原子，而非横向地从每个原子中取元素执行。

map_if(.x=x,.p=fun,.f=~'right',.else = ~'wrong')

map_if(.x=x,.p=fun,.f=sum,.else = ~'wrong')

map_at(.at=2:3,.x=x,.p=fun,.f=~"right",.else=~"wrong")

map_at(.at=2:3,.x=mydata,.p=fun,.f=~"right",.else=~"wrong")
y
z

map(1:10,function(x){rnorm(10,x)})
